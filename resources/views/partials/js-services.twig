<script src="/assets/modules/js/tabulator.min.js" defer></script>
<script src="/assets/js/tabler.min.js" defer></script>
<script src="/assets/modules/js/jspdf.umd.min.js" defer></script>
<script src="/assets/modules/js/jspdf.plugin.autotable.min.js" defer></script>
<script>
    var table;
   
    document.addEventListener("DOMContentLoaded", function(){

    function actionsFormatter(cell, formatterParams, onRendered) {
        return `
            <a class="btn btn-outline-primary btn-icon update-btn" href="/services/${cell.getRow().getData().id}/edit" title="{{ __('Manage Service') }}"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1"></path><path d="M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z"></path><path d="M16 5l3 3"></path></svg></a>
        `;
    }

    function statusFormatter(cell) {
        var statusArray = cell.getValue();
        if (statusArray && Array.isArray(statusArray)) {
            return statusArray.map(item => item.status).join(', ');
        }
        return "";
    }

    function statusBadgeFormatter(cell) {
        const value = cell.getValue();
        let badgeClass = 'secondary';
        let statusText = 'Unknown';

        switch (value) {
            case 'active':
                badgeClass = 'success';
                statusText = 'Active';
                break;
            case 'suspended':
                badgeClass = 'info';
                statusText = 'Suspended';
                break;
            case 'terminated':
                badgeClass = 'danger';
                statusText = 'Terminated';
                break;
            case 'expired':
                badgeClass = 'secondary';
                statusText = 'Expired';
                break;
            case 'pending':
                badgeClass = 'warning';
                statusText = 'Pending';
                break;
            default:
                badgeClass = 'dark';
                statusText = 'Unknown';
        }

        return `<span class="status status-${badgeClass}">${statusText}</span>`;
    }
    
    var searchTerm = ""; // global variable to hold the search term

    function updateSearchTerm(term) {
        searchTerm = term;
        table.replaceData();
    }

    table = new Tabulator("#serviceTable", {
        pagination: true,
        paginationMode: "remote",
        paginationSize: 10,
        paginationSizeSelector:[10, 25, 50, 100],
        clipboard:true,
        clipboardPasteAction:"replace",
        sortMode: "remote",
        ajaxURL: "/api/records/services",
        ajaxURLGenerator: function(url, config, params) {
            var queryParts = [];

            // Handle search term
            if (searchTerm) {
                queryParts.push("filter1=type,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter2=status,cs," + encodeURIComponent(searchTerm));
                queryParts.push("filter3=expires_at,cs," + encodeURIComponent(searchTerm));
            }

            // Handle sorting from Tabulator
            if (params.sort && params.sort.length > 0) {
                var sorter = params.sort[0]; // single-column sorting
                var sortField = encodeURIComponent(sorter.field);
                var sortDir = (sorter.dir === "asc" ? "asc" : "desc");
                queryParts.push("order=" + sortField + "," + sortDir);
            } else {
                // fallback default order if no sorters
                queryParts.push("order=id,desc");
            }

            // Include pagination parameters
            if (params.page) {
                queryParts.push("page=" + params.page + "," + params.size);
            }

            return url + "?" + queryParts.join("&");
        },
        ajaxResponse: function(url, params, response) {
            if (response && Array.isArray(response.records) && typeof response.results === 'number') {
                var pageSize = params.size || this.options.paginationSize;
                var lastPage = Math.ceil(response.results / pageSize);
                return {
                    last_page: lastPage,
                    data: response.records,
                };
            } else {
                console.error('Unexpected response format', response);
                return { last_page: 1, data: [] };
            }
        },
        layout:"fitColumns",
        responsiveLayout: "collapse",
        responsiveLayoutCollapseStartOpen:false,
        resizableColumns:false,
        placeholder: "{{ __('No Data') }}",
        columns:[
            {formatter:"responsiveCollapse", width:40, minWidth:40, hozAlign:"center", resizable:false, headerSort:false, responsive:0},
            {
                title: "{{ __('Service') }}",
                minWidth: 200,
                field: "config",
                headerSort: true,
                responsive: 0,
                formatter: function(cell) {
                    const config = cell.getValue();
                    try {
                        const data = typeof config === 'string' ? JSON.parse(config) : config;
                        if (data && data.domain) {
                            return `<span class="text-primary">${data.domain}</span>`;
                        } else {
                            return `<span class="text-muted">No domain</span>`;
                        }
                    } catch (e) {
                        return `<span class="text-danger">Invalid config</span>`;
                    }
                }
            },
            {title:"{{ __('Type') }}", field:"type", minWidth:80, resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Status') }}", field:"status", minWidth:80, resizable:false, headerSort:true, formatter: statusBadgeFormatter, responsive:2},
            {title:"{{ __('Created') }}", field:"created_at", width:250, resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Expiration') }}", field:"expires_at", width:250, resizable:false, headerSort:true, responsive:2},
            {title: "{{ __('Actions') }}", formatter: actionsFormatter, minWidth:120, responsive:0, headerSort: false, download:false, hozAlign: "center", cellClick:function(e, cell){ e.stopPropagation(); }},
        ]
    });
    var searchInput = document.getElementById("search-input");
    let searchTimeout;

    searchInput.addEventListener("input", function () {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        updateSearchTerm(searchInput.value);
      }, 300); // 300ms delay
    });
    });

    function downloadCSV() {
        table.download("csv", "services.csv");
    }
    
    function downloadPDF() {
        table.download("pdf", "services.pdf", {
            orientation:"portrait",
            title:"My Services"
        });
    }
</script>