<script src="/assets/modules/js/tabulator.min.js" defer></script>
<script src="/assets/js/tabler.min.js" defer></script>
<script src="/assets/modules/js/jspdf.umd.min.js" defer></script>
<script src="/assets/modules/js/jspdf.plugin.autotable.min.js" defer></script>
<script>
    var table;
    document.addEventListener("DOMContentLoaded", function(){
    
    function invoiceLinkFormatter(cell){
        var value = cell.getValue();
        return `<a href="/invoice/${cell.getRow().getData().invoice_number}" style="font-weight:bold;">${value}</a>`;
    }
    
    function actionsFormatter(cell, formatterParams, onRendered) {
        return `
            <a class="btn btn-outline-green btn-icon" href="/invoice/${cell.getRow().getData().invoice_number}/pay" title="{{ __('Pay Invoice') }}"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7 15h-3a1 1 0 0 1 -1 -1v-8a1 1 0 0 1 1 -1h12a1 1 0 0 1 1 1v3" /><path d="M7 9m0 1a1 1 0 0 1 1 -1h12a1 1 0 0 1 1 1v8a1 1 0 0 1 -1 1h-12a1 1 0 0 1 -1 -1z" /><path d="M12 14a2 2 0 1 0 4 0a2 2 0 0 0 -4 0" /></svg></a> <a class="btn btn-outline-primary btn-icon" href="/invoice/${cell.getRow().getData().invoice_number}" title="{{ __('View Invoice') }}"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0" /><path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6" /></svg></a>
        `;
    }
    
    function statusFormatter(cell) {
        const value = cell.getValue();
        let badgeClass = 'secondary';
        let statusText = 'Unknown';

        switch (value) {
            case 'paid':
                badgeClass = 'success';
                statusText = 'Paid';
                break;
            case 'unpaid':
                badgeClass = 'warning';
                statusText = 'Unpaid';
                break;
            case 'overdue':
                badgeClass = 'danger';
                statusText = 'Overdue';
                break;
            case 'cancelled':
                badgeClass = 'secondary';
                statusText = 'Cancelled';
                break;
            default:
                badgeClass = 'dark';
                statusText = 'Unknown';
        }

        return `<span class="status status-${badgeClass}">${statusText}</span>`;
    }
    
    table = new Tabulator("#invoicesTable", {
        ajaxURL:"/api/records/invoices?join=users",
        ajaxConfig:"GET",
        pagination:"local",
        paginationSize: 10,
        paginationSizeSelector:[10, 25, 50, 100],
        clipboard:true,
        clipboardPasteAction:"replace",
        printAsHtml:true,
        ajaxResponse:function(url, params, response){
            return response.records;
        },
        layout:"fitColumns",
        responsiveLayout: "collapse",
        responsiveLayoutCollapseStartOpen:false,
        resizableColumns:false,
        initialSort:[
            {column:"invoice_number", dir:"desc"},
        ],
        placeholder: "{{ __('No Data') }}",
        columns:[
            {formatter:"responsiveCollapse", width:40, minWidth:40, hozAlign:"center", resizable:false, headerSort:false, responsive:0},
            {title:"{{ __('Number') }}", field:"invoice_number", minWidth:200, resizable:false, headerSort:true, formatter: invoiceLinkFormatter, responsive:0},
            {title:"{{ __('User') }}", field:"user_id.username", minWidth:300, resizable:false, headerSort:true, responsive:2},
            {title:"{{ __('Date') }}", field:"issue_date", minWidth:300, resizable:false, headerSort:true, responsive:2},            
            {title:"{{ __('Amount') }}", field:"total_amount", minWidth:200, resizable:false, headerSort:true, responsive:2, formatter:"money", formatterParams:function(cell){
                return {
                    decimal: ".",
                    thousand: " ",
                    symbol: (cell.getRow().getData().user_id.currency || "$") + " ", // Ensures space after currency symbol
                    negativeSign: true
                };
            }},
            {title:"{{ __('Status') }}", field:"payment_status", minWidth:150, resizable:false, headerSort:true, formatter: statusFormatter, responsive:2},
            {title: "{{ __('Actions') }}", formatter: actionsFormatter, headerSort: false, download:false, hozAlign: "center", responsive:0, cellClick:function(e, cell){ e.stopPropagation(); }},
        ]
    });
    var searchInput = document.getElementById("search-input");
    searchInput.addEventListener("input", function () {
        var term = searchInput.value.toLowerCase();

        if (term) { // Only apply the filter when there's a term to search for
            table.setFilter(function (data) {
                // Check if any of the fields contain the search term
                return (
                    String(data.invoice_number).toLowerCase().includes(term) ||
                    String(data.user_id.username).toLowerCase().includes(term) ||
                    String(data.issue_date).toLowerCase().includes(term) ||
                    String(data.total_amount).toLowerCase().includes(term)
                );
            });
        } else {
            table.clearFilter(); // Clear the filter when the search box is emptied
        }
    });
    });
   
    function downloadCSV() {
        table.download("csv", "invoices.csv");
    }
    
    function downloadPDF() {
        table.download("pdf", "invoices.pdf", {
            orientation:"portrait",
            title:"My Invoices"
        });
    }
</script>