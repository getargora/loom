{% extends "layouts/app.twig" %}

{% block title %}{{ __('Create Order') }}{% endblock %}

{% block content %}
<style>
      @media (max-width: 575.98px) {
        .pricing-table thead { 
          display: none; 
        }
        .pricing-table tbody tr { 
          display: block; 
          margin-bottom: .75rem; 
          border: 1px solid var(--tblr-border-color, rgba(0,0,0,.125)); 
          border-radius: .5rem; 
          background: #fff;
          overflow: hidden;
        }
        .pricing-table tbody td {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: .75rem 1rem;
          border: 0 !important;
          border-top: 1px solid var(--tblr-border-color, rgba(0,0,0,.075)) !important;
        }
        .pricing-table tbody td:first-child {
          border-top: 0 !important;
          font-weight: 600;
          background: var(--tblr-bg-surface, #f8f9fa);
        }
        .pricing-table tbody td::before {
          content: attr(data-label);
          font-weight: 500;
          margin-right: 1rem;
          opacity: .8;
        }
      }
</style>
      <div class="page-wrapper">
        <!-- Page header -->
        <div class="page-header d-print-none">
          <div class="container-xl">
            <div class="row g-2 align-items-center">
              <div class="col">
                <div class="mb-1">
                  <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                      <a href="{{route('home')}}"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><polyline points="5 12 3 12 12 3 21 12 19 12" /><path d="M5 12v8a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-8" /><rect x="10" y="12" width="4" height="4" /></svg></a>
                    </li>
                    <li class="breadcrumb-item">
                      <a href="{{route('listOrders')}}">{{ __('Orders') }}</a>
                    </li>
                    <li class="breadcrumb-item active">
                      {{ __('Create Order') }}
                    </li>
                  </ol>
                </div>
                <h2 class="page-title">
                  {{ __('Create Order') }}
                </h2>
              </div>
            </div>
          </div>
        </div>
        <!-- Page body -->
        <div class="page-body">
          <div class="container-xl">
            {% include 'partials/flash.twig' %}

            {% if domainProducts|length == 0 and otherProducts|length == 0 %}
              <div class="card my-5">
                <div class="card-body text-center py-5">
                  <h3 class="card-title">{{ __('No products or services are available for order.') }}</h3>
                  <p class="text-muted mb-0">
                  {% if roles == 0 %}
                    {{ __('No products or services are configured yet. Please create a new provider in the admin area.') }}
                  {% else %}
                    {{ __('Please check back later or contact support for assistance.') }}
                  {% endif %}
                  </p>
                </div>
              </div>
            {% endif %}

            {% if domainProducts|length > 0 %}
            <div class="card mb-4">
              <div class="card-body">
                <h3 class="card-title">{{ __('Find Your Perfect Domain') }}</h3>
                <p class="text-muted">{{ __('Start your online journey by searching for an available domain.') }}</p>
                <div class="card">
                  <div class="card-body">
                    <form class="row g-2 align-items-stretch" onsubmit="checkDomain(event)">
                      <div class="col-md-9">
                        <input type="text" id="domainInput" class="form-control form-control-lg rounded" placeholder="example.com" autocapitalize="none" required>
                      </div>
                      <div class="col-md-3 d-grid">
                        <button class="btn btn-primary btn-lg w-100 rounded" type="submit">{{ __('Check') }}</button>
                      </div>
                    </form>
                    <div id="resultContainer" class="mt-4"></div>
                  </div>
                </div>
                {% if domainPricingTable|length > 0 %}
                <div class="card mt-4">
                  <div class="card-body">
                    <div class="table-responsive">
                      <table class="table table-striped pricing-table">
                        <thead>
                          <tr>
                            <th>{{ __('Domain') }}</th>
                            <th>{{ __('Registration') }}</th>
                            <th>{{ __('Renewal') }}</th>
                            <th>{{ __('Transfer') }}</th>
                          </tr>
                        </thead>
                        <tbody>
                          {% for row in domainPricingTable %}
                            <tr>
                              <td data-label="{{ __('Domain') }}"><strong>{{ row.tld }}</strong></td>
                              <td data-label="{{ __('Registration') }}">{{ row.register ? (row.register ~ ' ' ~ currency) : '-' }}</td>
                              <td data-label="{{ __('Renewal') }}">{{ row.renew ? (row.renew ~ ' ' ~ currency) : '-' }}</td>
                              <td data-label="{{ __('Transfer') }}">{{ row.transfer ? (row.transfer ~ ' ' ~ currency) : '-' }}</td>
                            </tr>
                          {% endfor %}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
                {% endif %}
              </div>
            </div>
            <style>
            input[name="domain"],
            button[type="submit"] {
              height: calc(2.875rem + 2px);
              border-radius: 0.5rem;
            }
            </style>
            {% endif %}

            {% if otherProducts|length > 0 %}
            <h3 class="mb-3">Other Services</h3>
            <div class="row">
              {% for item in otherProducts %}
                {% set provider = item.provider %}
                {% set product = item.product %}
                <div class="col-md-4 mb-4">
                  <div class="card h-100 cursor-pointer" onclick="showProductOptions('{{ provider.id }}', '{{ product.label }}')">
                    <div class="card-body">
                      <h4 class="card-title">{{ product.label }}</h4>
                      <p class="text-muted small">{{ provider.name }} â€” {{ product.description }}</p>
                      <span class="badge bg-blue text-blue-fg">from {{ currency }} {{ product.price }}/{{ product.billing }}</span>
                    </div>
                  </div>
                </div>
              {% endfor %}
            </div>
            {% endif %}

            <div id="productOptions" class="card mt-4 d-none">
              <div class="card-body">
                <h4>{{ __('Configure Product') }}</h4>
                <form method="post" action="{{ route('createOrder') }}">
                  {{ csrf.field | raw }}
                  <input type="hidden" name="product_choice" id="selectedProductChoice">
                  <div class="row g-3" id="dynamicFields"></div>
                  <div class="mt-3"><button class="btn btn-primary">{{ __('Submit Order') }}</button></div>
                </form>
              </div>
            </div>

          </div>
        </div>
        {% include 'partials/footer.twig' %}
      </div>
<script>
const productData = {{ otherProducts|json_encode|raw }};
const currency = {{ currency|json_encode|raw }};
const domainPrices = {{ domainPrices|json_encode|raw }};

function showProductOptions(providerId, productLabel) {
  const target = productData.find(p => p.provider.id == providerId && p.product.label == productLabel);
  if (!target) return;

  const product = target.product;
  const fieldsDiv = document.getElementById('dynamicFields');
  const choiceInput = document.getElementById('selectedProductChoice');
  const optionsCard = document.getElementById('productOptions');

  // Toggle behavior
  const isAlreadyShown = !optionsCard.classList.contains('d-none') &&
                         choiceInput.value === `${providerId}::${productLabel}`;

  if (isAlreadyShown) {
    optionsCard.classList.add('d-none');
    choiceInput.value = '';
    fieldsDiv.innerHTML = '';
    return;
  }

  fieldsDiv.innerHTML = '';
  choiceInput.value = `${providerId}::${productLabel}`;
  optionsCard.classList.remove('d-none');

  fieldsDiv.innerHTML += `
    <div class="col-md-6">
      <label class="form-label">Service Name</label>
      <input type="text" name="config[name]" class="form-control" required>
    </div>
    <div class="col-md-6">
      <label class="form-label">Billing Cycle</label>
      <select name="config[cycle]" class="form-select" required>
        <option value="monthly">Monthly</option>
        <option value="yearly" selected>Yearly</option>
      </select>
    </div>
  `;

  if (product.fields) {
    for (const [field, def] of Object.entries(product.fields)) {
      fieldsDiv.innerHTML += `
        <div class="col-md-6">
          <label class="form-label">${def.label || field}</label>
          <input type="${def.type || 'text'}" name="config[${field}]" class="form-control" placeholder="${def.hint || ''}" ${def.required ? 'required' : ''}>
        </div>
      `;
    }
  }
}

async function checkDomain(event) {
    event.preventDefault();
    const domainInput = document.getElementById("domainInput");
    const resultContainer = document.getElementById("resultContainer");

    const domain = domainInput.value.trim();
    if (!domain) {
        resultContainer.innerHTML = '<div class="alert alert-warning">Please enter a domain name.</div>';
        return;
    }

    try {
        const response = await fetch('/spark/domain/check', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ domains: [domain] })
        });

        const contentType = response.headers.get("content-type") || "";
        let data = {};

        if (contentType.includes("application/json")) {
            data = await response.json();
        } else {
            const text = await response.text();
            // Try to extract error manually if malformed
            const match = text.match(/"message"\s*:\s*"([^"]+)"/);
            const msg = match ? match[1] : 'An unknown error occurred.';

            resultContainer.innerHTML = `<div class="alert alert-danger">${msg}</div>`;
            return;
        }

        if (!response.ok || !data.success) {
            resultContainer.innerHTML = `<div class="alert alert-danger">${data.message || 'Domain check failed.'}</div>`;
            return;
        }

        resultContainer.innerHTML = formatResult(data);
    } catch (error) {
        resultContainer.innerHTML = `<div class="alert alert-danger">Network error: ${error.message}</div>`;
    }
}

function formatResult(data) {
    if (!data.domains || data.domains.length === 0) {
        return '<div class="alert alert-info">No results found.</div>';
    }

    return data.domains.map(domain => {
        const tld = domain.name.split('.').pop().toLowerCase();
        let domainPrice = domainPrices?.[tld] ? `${currency} ${domainPrices[tld]}` : null;

        return `
            <div class="card border-${domain.available ? 'success' : 'danger'} mt-3">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                        <div class="d-flex align-items-center flex-wrap gap-3">
                            <strong class="me-2">${domain.name}</strong>
                            <span class="status ${domain.available ? 'status-green' : 'status-red'}">
                                ${domain.available ? 'Available' : 'Not Available'}
                            </span>
                            ${domainPrice && domain.available ? `<span class="text-muted">${domainPrice}</span>` : ''}
                            ${domain.reason ? `<span class="text-muted small ms-2">${domain.reason}</span>` : ''}
                        </div>
                        <div>
                            ${domain.available ? `
                                <a href="/orders/register/${encodeURIComponent(domain.name)}" class="btn btn-success">
                                    Register
                                </a>
                            ` : `
                                <a href="/orders/transfer/${encodeURIComponent(domain.name)}" class="btn btn-outline-green">
                                    Transfer
                                </a>
                            `}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}
</script>
{% endblock %}